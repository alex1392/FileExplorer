<fd:RevealWindow x:Class="FileExplorer.Views.MainWindow"
								 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
								 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
								 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
								 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
								 xmlns:local="clr-namespace:FileExplorer.Views"
								 xmlns:converter="clr-namespace:FileExplorer.Views.Converters"
								 xmlns:model="clr-namespace:FileExplorer.Models"
								 xmlns:vm="clr-namespace:FileExplorer.ViewModels"
								 xmlns:fd="clr-namespace:Cyc.FluentDesign;assembly=Cyc.FluentDesign"
								 xmlns:fa="http://schemas.fontawesome.io/icons/"
								 xmlns:sys="clr-namespace:System;assembly=mscorlib"
								 xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
								 xmlns:util="clr-namespace:FileExplorer.Utilities"
								 xmlns:navi="clr-namespace:System.Windows.Navigation;assembly=presentationframework"
								 mc:Ignorable="d"
								 d:DataContext="{d:DesignInstance Type=vm:MainWindowViewModel, IsDesignTimeCreatable=True}"
								 Icon="/FileExplorer;component/Resources/Computer.ico"
								 Title="MainWindow"
								 WindowStartupLocation="CenterScreen"
								 Height="450"
								 Width="800"
								 Name="mainWindow">
	<Window.CommandBindings>
		<CommandBinding Command="{x:Static ApplicationCommands.Undo}"
										Executed="Undo"
										CanExecute="CanUndo" />
		<CommandBinding Command="{x:Static ApplicationCommands.Redo}"
										Executed="Redo"
										CanExecute="CanRedo" />
		<CommandBinding Command="{x:Static ApplicationCommands.Copy}"
										Executed="Copy"
										CanExecute="CanCopy" />
		<CommandBinding Command="{x:Static ApplicationCommands.Cut}"
										Executed="Cut"
										CanExecute="CanCut" />
		<CommandBinding Command="{x:Static ApplicationCommands.Paste}"
										Executed="Paste"
										CanExecute="CanPaste" />
		<CommandBinding Command="{x:Static ApplicationCommands.New}"
										Executed="New"
										CanExecute="CanNew" />
		<CommandBinding Command="{x:Static ApplicationCommands.Delete}"
										Executed="Delete"
										CanExecute="CanDelete" />
	</Window.CommandBindings>
	<DockPanel x:Name="mainDockPanel">
		<DockPanel Name="MenuBar"
							 DockPanel.Dock="Top"
							 Height="32">
			<DockPanel.Resources>
				<sys:Double x:Key="IconWidth">20</sys:Double>
				<Style TargetType="ToggleButton">
					<Setter Property="Width"
									Value="{Binding ElementName=MenuBar, Path=Height}" />
					<Setter Property="Height"
									Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Width}" />
				</Style>
				<Style TargetType="Button">
					<Setter Property="Width"
									Value="{Binding ElementName=MenuBar, Path=Height}" />
					<Setter Property="Height"
									Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Width}" />
				</Style>
				<Style TargetType="fa:ImageAwesome">
					<Setter Property="Width"
									Value="{StaticResource IconWidth}" />
					<Setter Property="Height"
									Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Width}" />
				</Style>
				<Style TargetType="Image">
					<Setter Property="Width"
									Value="{StaticResource IconWidth}" />
				</Style>
			</DockPanel.Resources>
			<StackPanel Orientation="Horizontal"
									DockPanel.Dock="Left"
									Background="White">
				<Grid>
					<ComboBox Name="NavigationComboBox"
										Width="{Binding ElementName=MenuBar, Path=Height, Converter={util:MathConverter}, ConverterParameter=x*2+18}"
										Height="{Binding ElementName=MenuBar, Path=Height}"
										IsEditable="False"
										SelectedItem="{Binding RelativeSource={RelativeSource Self}, Path=Items, Mode=OneWay, Converter={converter:SelectedItemConverter}}"
										PreviewMouseDown="NavigationComboBox_PreviewMouseDown">
						<ComboBox.Resources>
							<navi:JournalEntryUnifiedViewConverter x:Key="journalConverter" />
						</ComboBox.Resources>
						<ComboBox.ItemsSource>
							<MultiBinding Converter="{StaticResource journalConverter}">
								<Binding ElementName="FolderFrame"
												 Path="BackStack" />
								<Binding ElementName="FolderFrame"
												 Path="ForwardStack" />
							</MultiBinding>
						</ComboBox.ItemsSource>
						<ComboBox.ItemContainerStyle>
							<Style TargetType="ComboBoxItem">
								<Setter Property="HorizontalContentAlignment"
												Value="Stretch" />
							</Style>
						</ComboBox.ItemContainerStyle>
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<MenuItem Command="{x:Static NavigationCommands.NavigateJournal}"
													CommandTarget="{Binding ElementName=FolderFrame}"
													CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
									<MenuItem.Template>
										<ControlTemplate TargetType="MenuItem">
											<TextBlock>
												<TextBlock.Text>
													<MultiBinding Converter="{converter:NavigationHistroyConverter}">
														<Binding Path="Name" />
														<Binding ElementName="FolderFrame"
																		 Path="Content.Title" />
													</MultiBinding>
												</TextBlock.Text>
											</TextBlock>
										</ControlTemplate>
									</MenuItem.Template>
								</MenuItem>
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<StackPanel Orientation="Horizontal"
											Visibility="Visible">
						<Button Command="{Binding GoBackCommand}">
							<fa:ImageAwesome Icon="ArrowLeft" />
						</Button>
						<Button Command="{Binding GoForwardCommand}">
							<fa:ImageAwesome Icon="ArrowRight" />
						</Button>
					</StackPanel>
				</Grid>
				<Button Command="{Binding GoUpCommand}">
					<fa:ImageAwesome Icon="ArrowUp" />
				</Button>
				<Button Command="{Binding RefreshCommand}">
					<fa:ImageAwesome Icon="Refresh" />
				</Button>
				<Button Command="{Binding GoHomeCommand}">
					<fa:ImageAwesome Icon="Home" />
				</Button>
			</StackPanel>
			<ToggleButton Name="PreviewToggleButton"
										DockPanel.Dock="Right"
										IsChecked="True"
										Click="PreviewToggleButton_Click">
				<fa:ImageAwesome Icon="Binoculars" />
			</ToggleButton>
			<ToggleButton Name="TreeViewToggleButton"
										DockPanel.Dock="Right"
										IsChecked="True"
										Click="TreeViewToggleButton_Click">
				<Image Source="/Resources/treeview.png" />
			</ToggleButton>
			<ToggleButton Name="GroupToggleButton"
										DockPanel.Dock="Right"
										IsChecked="{Binding ElementName=FolderFrame, Path=Content.IsGrouping, Mode=TwoWay}">
				<Image Source="{StaticResource shapes_solidDrawingImage}" />
			</ToggleButton>
			<Button Name="ViewButton"
							Content="{Binding ElementName=FolderFrame, Path=Content.CurrentView, Converter={converter:ViewTypeConverter}}"
							DockPanel.Dock="Right">
				<i:Interaction.Behaviors>
					<util:DropDownButtonBehavior />
				</i:Interaction.Behaviors>
				<Button.ContextMenu>
					<ContextMenu>
						<ContextMenu.Resources>
							<sys:Double x:Key="ContextMenuIconWidth">15</sys:Double>
							<Style TargetType="fa:ImageAwesome">
								<Setter Property="Width"
												Value="{StaticResource ContextMenuIconWidth}" />
								<Setter Property="Height"
												Value="{StaticResource ContextMenuIconWidth}" />
							</Style>
							<Style TargetType="Image">
								<Setter Property="Width"
												Value="{StaticResource ContextMenuIconWidth}" />
							</Style>
						</ContextMenu.Resources>
						<MenuItem Header="ListView"
											Click="ViewButton_Click">
							<MenuItem.Icon>
								<fa:ImageAwesome Icon="List" />
							</MenuItem.Icon>
						</MenuItem>
						<MenuItem Header="GridView"
											Click="ViewButton_Click">
							<MenuItem.Icon>
								<fa:ImageAwesome Icon="Th" />
							</MenuItem.Icon>
						</MenuItem>
						<MenuItem Header="TileView"
											Click="ViewButton_Click">
							<MenuItem.Icon>
								<Image Source="{StaticResource tileview_solidDrawingImage}" />
							</MenuItem.Icon>
						</MenuItem>
					</ContextMenu>
				</Button.ContextMenu>
			</Button>
			<Border Name="searchBoxBorder"
							DockPanel.Dock="Right"
							Background="White"
							BorderBrush="#FFABADB3"
							BorderThickness="1">
				<StackPanel Orientation="Horizontal">
					<fa:ImageAwesome Icon="Search"
													 Height="{StaticResource IconWidth}"
													 Foreground="Gray"
													 Margin="3" />
					<Grid Width="100">
						<TextBox x:Name="searchTextBox"
										 BorderBrush="Transparent"
										 VerticalAlignment="Center"
										 VerticalContentAlignment="Center"
										 Height="{Binding ElementName=MenuBar, Path=Height}"
										 Text="{Binding ElementName=FolderFrame, Path=Content.FilterText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
						<TextBlock VerticalAlignment="Center"
											 Foreground="Gray"
											 Padding="3"
											 IsHitTestVisible="False">
							<TextBlock.Style>
								<Style TargetType="{x:Type TextBlock}">
									<Setter Property="Visibility"
													Value="Collapsed" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding Text, ElementName=searchTextBox}"
																 Value="">
											<Setter Property="Visibility"
															Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style><Run Text="Search in folder" /></TextBlock>
					</Grid>
				</StackPanel>
			</Border>
			<Border Name="PathItemBorder"
							Grid.Column="1"
							BorderBrush="Black">
				<Grid>
					<!--TODO: modify scroll bar-->
					<ListBox Name="PathListBox"
									 ItemsSource="{Binding PathItems}"
									 ScrollViewer.HorizontalScrollBarVisibility="Hidden"
									 Height="32"
									 MouseDown="PathListBox_MouseDown">
						<ListBox.ItemTemplate>
							<DataTemplate DataType="{x:Type model:Item}">
								<StackPanel Orientation="Horizontal">
									<TextBlock Text="{Binding Name}"
														 VerticalAlignment="Center"
														 Margin="3" />
								</StackPanel>
							</DataTemplate>
						</ListBox.ItemTemplate>
						<ListBox.ItemContainerStyle>
							<Style TargetType="ListBoxItem">
								<EventSetter Event="Selected"
														 Handler="PathItem_Selected" />
							</Style>
						</ListBox.ItemContainerStyle>
						<ListBox.ItemsPanel>
							<ItemsPanelTemplate>
								<StackPanel Orientation="Horizontal" />
							</ItemsPanelTemplate>
						</ListBox.ItemsPanel>
					</ListBox>
					<TextBox Name="PathTextBox"
									 Height="{Binding ElementName=PathListBox, Path=Height}"
									 Text="{Binding Path, Mode=OneWay}"
									 Visibility="Hidden"
									 KeyDown="PathTextBox_KeyDown"
									 LostFocus="PathTextBox_LostFocus" />
				</Grid>
			</Border>
		</DockPanel>
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Name="TreeViewGridColumn"
													Width="auto">
					<ColumnDefinition.MaxWidth>
						<MultiBinding Converter="{util:MathConverter}"
													ConverterParameter="x-y-z">
							<Binding ElementName="mainDockPanel"
											 Path="ActualWidth" />
							<Binding ElementName="ItemViewGridColumn"
											 Path="MinWidth" />
							<Binding ElementName="PreviewGridColumn"
											 Path="ActualWidth" />
						</MultiBinding>
					</ColumnDefinition.MaxWidth>
				</ColumnDefinition>
				<ColumnDefinition Name="ItemViewGridColumn"
													Width="*"
													MinWidth="300" />
				<ColumnDefinition Name="PreviewGridColumn"
													Width="auto">
					<ColumnDefinition.MaxWidth>
						<MultiBinding Converter="{util:MathConverter}"
													ConverterParameter="x-y-z">
							<Binding ElementName="mainDockPanel"
											 Path="ActualWidth" />
							<Binding ElementName="ItemViewGridColumn"
											 Path="MinWidth" />
							<Binding ElementName="TreeViewGridColumn"
											 Path="ActualWidth" />
						</MultiBinding>
					</ColumnDefinition.MaxWidth>
				</ColumnDefinition>
			</Grid.ColumnDefinitions>
			<TreeView Name="FolderTreeView"
								Grid.Column="0"
								DockPanel.Dock="Left"
								ItemsSource="{Binding TreeItems}"
								Visibility="{Binding ElementName=TreeViewToggleButton, Path=IsChecked, Converter={converter:BoolToVisibilityConverter}}">
				<TreeView.ItemTemplate>
					<HierarchicalDataTemplate DataType="{x:Type model:ITreeItem}"
																		ItemsSource="{Binding SubFolders}">
						<StackPanel Orientation="Horizontal">
							<Image Source="{Binding .,Converter={converter:IconConverter}}"
										 Width="18" />
							<TextBlock Text="{Binding Name}"
												 VerticalAlignment="Center"
												 Margin="3" />
						</StackPanel>
					</HierarchicalDataTemplate>
				</TreeView.ItemTemplate>
				<TreeView.ItemContainerStyle>
					<Style TargetType="TreeViewItem">
						<EventSetter Event="Selected"
												 Handler="TreeViewItem_Selected" />
						<EventSetter Event="Expanded"
												 Handler="TreeViewItem_Expanded" />
					</Style>
				</TreeView.ItemContainerStyle>
			</TreeView>
			<GridSplitter Grid.Column="0"
										Width="3"
										Visibility="{Binding ElementName=TreeViewToggleButton, Path=IsChecked, Converter={converter:BoolToVisibilityConverter}}" />
			<Frame Name="FolderFrame"
						 Grid.Column="1"
						 NavigationUIVisibility="Hidden" />
			<GridSplitter Grid.Column="1"
										Width="3"
										Visibility="{Binding ElementName=PreviewToggleButton, Path=IsChecked, Converter={converter:BoolToVisibilityConverter}}" />
			<Grid Grid.Column="2"
						Visibility="{Binding ElementName=PreviewToggleButton, Path=IsChecked, Converter={converter:BoolToVisibilityConverter}}"
						Background="White">
				<ScrollViewer VerticalScrollBarVisibility="Auto"
											HorizontalScrollBarVisibility="Auto">
					<Image Name="previewImage"
								 Source="{Binding ElementName=FolderFrame, Path=Content.SelectedItemPath, Converter={converter:PathToUriConverter}}">
						<Image.Style>
							<Style TargetType="Image">
								<Style.Triggers>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Source}"
															 Value="{x:Null}">
										<Setter Property="Visibility"
														Value="Collapsed" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Image.Style>
					</Image>
				</ScrollViewer>
				<FlowDocumentReader Name="previewDocument"
														ViewingMode="Scroll"
														Document="{Binding ElementName=FolderFrame, Path=Content.SelectedItemPath, Converter={converter:FlowDocumentConverter}}">
					<FlowDocumentReader.Style>
						<Style TargetType="FlowDocumentReader">
							<Style.Triggers>
								<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Document}"
														 Value="{x:Null}">
									<Setter Property="Visibility"
													Value="Collapsed" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</FlowDocumentReader.Style>
				</FlowDocumentReader>
			</Grid>
		</Grid>

	</DockPanel>

</fd:RevealWindow>